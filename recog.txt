def generate_frames():
    encodingsP = 'recognizer/trainer.yml'
    print('[INFO] Load Encodings+Face...')
    data = pickle.loads(open(encodingsP, 'rb').read())
    camera = cv2.VideoCapture(0)

    while True:
        ret, frame = camera.read()
    
        if not ret:
            print("Error: Could not read from the camera.")
            break

    # Face detection
        boxes = face_recognition.face_locations(frame)
        encodings = face_recognition.face_encodings(frame, boxes)
    
        names = []
        confidences = []  # To store confidence values
    
        for encoding in encodings:
        # Calculate face distances (confidences) for each known encoding
            face_distances = face_recognition.face_distance(data['encodings'], encoding)
        
        # Find the index of the known encoding with the smallest distance (highest confidence)
            min_distance_idx = face_distances.argmin()
        
            if face_distances[min_distance_idx] < 0.5:  # You can adjust this threshold as needed
                name = data['names'][min_distance_idx]
                confidence = (1 - face_distances[min_distance_idx])*100  # Confidence is 1 minus distance
            else:
                name = 'Unknown'
                confidence = 0
        
            names.append(name)
            confidences.append(confidence)
    
    # Process detected faces and save images
        for ((top, right, bottom, left), name, confidence) in zip(boxes, names, confidences):
            cv2.rectangle(frame, (left, top), (right, bottom), (0, 0, 255), 2)
            text = f"{name} ({confidence:.2f})" if confidence is not None else name
            cv2.putText(frame, text, (left, bottom + 23), cv2.FONT_HERSHEY_COMPLEX, 0.8, (0, 0, 255), 2)
            current_datetime = datetime.datetime.now()
            date_string = current_datetime.strftime("%Y%m%d%H%M%S")
        
    # Print the datetime string
            print(date_string)
            cv2.imwrite('static/'+'images/'+'detection/'+name+date_string+'.jpg',frame)
            image_detect=name+date_string+'.jpg'
            print(image_detect)
            x=datetime.datetime.now()
            dmy_time=x
            print(dmy_time)
    
        ret, buffer = cv2.imencode('.jpg', frame)
        frame = buffer.tobytes()
    
        yield (
            b'--frame\r\n'
            b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n'
        )

# Release the camera and cleanup
    camera.release()
    cv2.destroyAllWindows()